APPLICATION PROGRAM 1:
An attendance register is commonly used to keep track of students' 
presence in a class or an event. Sorting the names in the attendance 
register alphabetically is essential for easy access and analysis. The 
task is to develop a program that takes a list of names in an 
attendance register as input and sorts them alphabetically using the 
quick sort algorithm. The program should read the names from a file 
or accept user input, sort them, and display the sorted list of names.


#include <stdio.h>
#include <string.h>

// Function to swap two names
void swap(char arr[][100], int a, int b) {
    char temp[100];
    strcpy(temp, arr[a]);
    strcpy(arr[a], arr[b]);
    strcpy(arr[b], temp);
}

// Function to perform partitioning for quicksort
int partition(char arr[][100], int s, int e) {
    char pivot[100];
    strcpy(pivot, arr[e]);
    int pIndex = s;

    for (int i = s; i < e; i++) {
        if (strcmp(arr[i], pivot) <= 0) {
            swap(arr, i, pIndex);
            pIndex++;
        }
    }
    swap(arr, e, pIndex);
    return pIndex;
}

// Function to implement quicksort
void quickSort(char arr[][100], int s, int e) {
    if (s < e) {
        int p = partition(arr, s, e);
        quickSort(arr, s, p - 1);
        quickSort(arr, p + 1, e);
    }
}

int main() {
    int n;
    printf("Enter the number of names in the attendance register: ");
    scanf("%d", &n);

    char names[n][100];

    // Reading names from user input
    printf("Enter the names:\n");
    for (int i = 0; i < n; i++) {
        scanf("%s", names[i]);
    }

    // Sorting the names using quicksort
    quickSort(names, 0, n - 1);

    // Displaying the sorted names
    printf("\nSorted names:\n");
    for (int i = 0; i < n; i++) {
        printf("%s\n", names[i]);
    }

    return 0;
}
